import logging
import json
import uuid
import os
import requests # type: ignore
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, MessageHandler, CommandHandler, filters, ContextTypes

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("BOT_TOKEN")
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
REPO = "alinaermish/nfc-redirect-site"
FILE_PATH = "bot/data.json"
DATA_FILE = "bot/data.json"

def load_data():
    try:
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=4)
    push_to_github()

def push_to_github():
    url = f"https://api.github.com/repos/{REPO}/contents/{FILE_PATH}"

    with open(DATA_FILE, "rb") as f:
        content = f.read()
        encoded_content = content.encode("base64") if hasattr(content, "encode") else content

    sha = get_file_sha(url)
    headers = {
        "Authorization": f"token {GITHUB_TOKEN}",
        "Accept": "application/vnd.github.v3+json"
    }

    payload = {
        "message": "update data.json from bot",
        "content": encoded_content.decode("utf-8"),
        "sha": sha
    }

    res = requests.put(url, headers=headers, json=payload)
    if res.status_code >= 400:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É—à–µ –≤ GitHub: %s", res.text)
    else:
        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ GitHub")

def get_file_sha(url):
    res = requests.get(url, headers={
        "Authorization": f"token {GITHUB_TOKEN}",
        "Accept": "application/vnd.github.v3+json"
    })
    if res.status_code == 200:
        return res.json()["sha"]
    return None

def is_valid_link(link):
    return link.startswith("http://") or link.startswith("https://")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    data = load_data()
    data[user_id] = {
        "step": "waiting_for_link",
        "pets": []
    }
    save_data(data)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Taplink –∏–ª–∏ –¥—Ä—É–≥—É—é, –∫–æ—Ç–æ—Ä—É—é —É–≤–∏–¥–∏—Ç –Ω–∞—à–µ–¥—à–∏–π –ø–∏—Ç–æ–º—Ü–∞ üëÄ")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    text = update.message.text.strip()
    data = load_data()

    if user_id not in data:
        data[user_id] = {"step": "waiting_for_link", "pets": []}
        save_data(data)
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Taplink –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–∞–π—Ç üôèüèª")
        return

    step = data[user_id].get("step")

    if step == "waiting_for_link":
        if is_valid_link(text):
            data[user_id]["current_pet"] = {"link": text}
            data[user_id]["step"] = "confirm_redirect"
            save_data(data)
            await update.message.reply_text(
                "–¢—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –Ω–∞—à–µ–¥—à–∏–π –ø–∏—Ç–æ–º—Ü–∞ –ø–µ—Ä–µ—à—ë–ª –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ?",
                reply_markup=ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True)
            )
        else:
            await update.message.reply_text("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑, –Ω–∞—á–∏–Ω–∞—è —Å https://")

    elif step == "confirm_redirect":
        if text.lower() == "–¥–∞":
            data[user_id]["step"] = "ask_recipient"
            save_data(data)
            await update.message.reply_text(
                "–ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –∫–æ–≥–¥–∞ –ø–∏—Ç–æ–º—Ü–∞ –Ω–∞–π–¥—É—Ç?",
                reply_markup=ReplyKeyboardMarkup(
                    [["–ú–Ω–µ", "–ú–Ω–µ –∏ –¥—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É", "–î—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É"]],
                    one_time_keyboard=True, resize_keyboard=True
                )
            )
        elif text.lower() == "–Ω–µ—Ç":
            data[user_id]["step"] = "waiting_for_link"
            save_data(data)
            await update.message.reply_text("–û–∫, –ø—Ä–∏—à–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.")
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")

    elif step == "ask_recipient":
        if text == "–ú–Ω–µ":
            data[user_id]["current_pet"]["owner_ids"] = [user_id]
            data[user_id]["step"] = "ask_pet_name"
            save_data(data)
            await update.message.reply_text("–ö–∞–∫ –∑–æ–≤—É—Ç –ø–∏—Ç–æ–º—Ü–∞? üçÄ")
        elif text in ["–ú–Ω–µ –∏ –¥—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É", "–î—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É"]:
            data[user_id]["step"] = "ask_other_id"
            data[user_id]["current_pet"]["include_self"] = (text == "–ú–Ω–µ –∏ –¥—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É")
            save_data(data)
            await update.message.reply_text(
                "–û—Ç–ø—Ä–∞–≤—å Telegram ID –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID ‚Äî –Ω–∞–ø–∏—à–∏ @userinfobot –∏ –ø–µ—Ä–µ—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
                "–ù–µ –∑–∞–±—É–¥—å: –≤—Ç–æ—Ä–æ–π —á–µ–ª–æ–≤–µ–∫ –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ (/start)"
            )
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")

    elif step == "ask_other_id":
        if text.isdigit():
            other_id = text
            include_self = data[user_id]["current_pet"].get("include_self", False)
            owner_ids = [other_id]
            if include_self:
                owner_ids.append(user_id)
            data[user_id]["current_pet"]["owner_ids"] = owner_ids
            data[user_id]["step"] = "ask_pet_name"
            save_data(data)
            await update.message.reply_text("–ö–∞–∫ –∑–æ–≤—É—Ç –ø–∏—Ç–æ–º—Ü–∞? ‚ú®")
        else:
            await update.message.reply_text("ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.")

    elif step == "ask_pet_name":
        data[user_id]["current_pet"]["name"] = text
        pet_uuid = str(uuid.uuid4())
        data[user_id]["current_pet"]["uuid"] = pet_uuid
        data[user_id]["pets"].append(data[user_id]["current_pet"])
        del data[user_id]["current_pet"]
        data[user_id]["step"] = "waiting_for_link"
        save_data(data)

        redirect_url = f"https://findmypetbot.vercel.app/location?uuid={pet_uuid}"
        await update.message.reply_text(
            f"‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è NFC-—Ç–µ–≥–∞:\n{redirect_url}\n\n"
            "–î–æ–±–∞–≤—å –µ—ë –≤ —Ç–µ–≥ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏ –∫ –æ—à–µ–π–Ω–∏–∫—É."
        )
    else:
        data[user_id]["step"] = "waiting_for_link"
        save_data(data)
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏.")

if __name__ == "__main__":
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.run_polling()
