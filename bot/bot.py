import logging
import json
import uuid
import asyncio
import os
import requests  # type: ignore
import socket
import threading
import base64
import httpx
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.environ.get("BOT_TOKEN")
DATA_FILE = "data.json"
GITHUB_TOKEN = os.environ.get("GITHUB_TOKEN")
GITHUB_REPO = "alinaermish/nfc-redirect-site"
GITHUB_BRANCH = "main"
GITHUB_FILE_PATH = "data.json"
SELF_URL = os.environ.get("RENDER_EXTERNAL_URL")
ADMIN_ID = 302108623

# === GitHub JSON –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ===
def restore_data_from_github():
    try:
        url = f"https://api.github.com/repos/{GITHUB_REPO}/contents/{GITHUB_FILE_PATH}"
        headers = {
            "Authorization": f"Bearer {GITHUB_TOKEN}",
            "Accept": "application/vnd.github+json"
        }
        res = requests.get(url, headers=headers)
        if res.status_code == 200:
            content = res.json().get("content", "")
            decoded = base64.b64decode(content).decode("utf-8")
            with open(DATA_FILE, "w") as f:
                f.write(decoded)
            print("‚úÖ data.json –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ GitHub")
        else:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å data.json —Å GitHub:", res.text)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ data.json –∏–∑ GitHub:", e)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ===
def load_data():
    try:
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=4)
    push_to_github()

def push_to_github():
    try:
        print("üöÄ push_to_github() –≤—ã–∑–≤–∞–Ω–∞")
        with open(DATA_FILE, "rb") as f:
            base64_content = base64.b64encode(f.read()).decode("utf-8")

        url = f"https://api.github.com/repos/{GITHUB_REPO}/contents/{GITHUB_FILE_PATH}"
        headers = {
            "Authorization": f"Bearer {GITHUB_TOKEN}",
            "Accept": "application/vnd.github+json"
        }

        get_resp = requests.get(url, headers=headers)
        print("üì• –û—Ç–≤–µ—Ç GET –æ—Ç GitHub:", get_resp.status_code, get_resp.text)
        sha = get_resp.json().get("sha") if get_resp.status_code == 200 else None

        payload = {
            "message": "update data.json from bot",
            "content": base64_content,
            "branch": GITHUB_BRANCH
        }
        if sha:
            payload["sha"] = sha

        res = requests.put(url, json=payload, headers=headers)
        print("üì§ –û—Ç–≤–µ—Ç PUT –æ—Ç GitHub:", res.status_code, res.text)

        if res.status_code not in [200, 201]:
            print("‚ùå GitHub API push failed:", res.json())
        else:
            print("‚úÖ data.json –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ GitHub")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ GitHub:", e)

def is_valid_link(link):
    return link.startswith("http://") or link.startswith("https://")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    data = load_data()
    data[user_id] = {"step": "waiting_for_link", "pets": []}
    save_data(data)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Çüëãüèº\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–¥–µ–ª–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è NFC —Ç—ç–≥–∞ –≤ –∞–¥—Ä–µ—Å—Å–Ω–∏–∫–µ‚ú®\n\n–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Taplink –∏–ª–∏ –¥—Ä—É–≥—É—é, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ–ª –Ω–∞—à–µ–¥—à–∏–πüëÄ \n–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Å—ã–ª–∫–∞ —Å —Ç–≤–æ–∏–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏, –∫–∞–∫ taplink, –∏–ª–∏ –∂–µ –ø—Ä–æ—Å—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç —Å —Ç–æ–±–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä https://wa.me/+7XXXXXXXXXX")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    mention = user.mention_html() if user.username else f"ID: {user.id}"
    await context.bot.send_message(chat_id=ADMIN_ID, text=f"üö® –ö—Ç–æ-—Ç–æ –≤—ã–∑–≤–∞–ª –ø–æ–º–æ—â—å: {mention}", parse_mode="HTML")
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ, —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –Ø —Å–≤—è–∂—É—Å—å —Å —Ç–æ–±–æ–π –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ ‚ú®")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    text = update.message.text.strip()
    data = load_data()

    if user_id not in data:
        data[user_id] = {"step": "waiting_for_link", "pets": []}
        save_data(data)
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Taplink –∏–ª–∏ –¥—Ä—É–≥—É—é, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ–ª –Ω–∞—à–µ–¥—à–∏–πüëÄ")
        return

    step = data[user_id].get("step")

    if step == "waiting_for_link":
        if is_valid_link(text):
            data[user_id]["current_pet"] = {"link": text}
            data[user_id]["step"] = "confirm_redirect"
            save_data(data)
            await update.message.reply_text(
                "–¢—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –Ω–∞—à–µ–¥—à–∏–π –ø–∏—Ç–æ–º—Ü–∞ –ø–µ—Ä–µ—à—ë–ª –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ?",
                reply_markup=ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True)
            )
        else:
            await update.message.reply_text("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑. \n–ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å —Å https://")

    elif step == "confirm_redirect":
        if text.lower() == "–¥–∞":
            data[user_id]["step"] = "ask_recipient"
            save_data(data)
            await update.message.reply_text(
                "–ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–∏—Ç–æ–º—Ü–∞, –∫–æ–≥–¥–∞ –µ–≥–æ –Ω–∞–π–¥—É—Ç?\n–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:",
                reply_markup=ReplyKeyboardMarkup(
                    [["–ú–Ω–µ", "–ú–Ω–µ –∏ –¥—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É", "–î—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É"]],
                    one_time_keyboard=True, resize_keyboard=True
                )
            )
        elif text.lower() == "–Ω–µ—Ç":
            data[user_id]["step"] = "waiting_for_link"
            save_data(data)
            await update.message.reply_text("–û–∫, —Ç–æ–≥–¥–∞ –ø—Ä–∏—à–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.")
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")

    elif step == "ask_recipient":
        if text == "–ú–Ω–µ":
            data[user_id]["current_pet"]["owner_ids"] = [user_id]
            data[user_id]["step"] = "ask_pet_name"
            save_data(data)
            await update.message.reply_text("–ö–∞–∫ –∑–æ–≤—É—Ç —Ç–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞?ü¶Ñ")
        elif text in ["–ú–Ω–µ –∏ –¥—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É", "–î—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É"]:
            data[user_id]["step"] = "ask_other_id"
            data[user_id]["current_pet"]["include_self"] = (text == "–ú–Ω–µ –∏ –¥—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É")
            save_data(data)
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å Telegram ID –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.\n–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å, –∫–∞–∫ –Ω–∞–π—Ç–∏ ID, –Ω–∞–ø–∏—à–∏ @userinfobot –∏ –ø–µ—Ä–µ—à–ª–∏ –µ–º—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω—É–∂–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –æ–Ω –ø–æ–∫–∞–∂–µ—Ç –µ–≥–æ ID.\n–ö–∞–∫ —Å–¥–µ–ª–∞–µ—à—å, –ø—Ä–∏—à–ª–∏ –≤ —ç—Ç–æ—Ç —á–∞—Ç ID\n\n–ù–µ –∑–∞–±—É–¥—å, —á—Ç–æ–±—ã –±–æ—Ç —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É, –æ–Ω –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –±–æ—Ç—É (–Ω–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç –±–æ—Ç–∞ /start)")
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")

    elif step == "ask_other_id":
        if text.isdigit():
            other_id = text
            include_self = data[user_id]["current_pet"].get("include_self", False)
            owner_ids = [other_id]
            if include_self:
                owner_ids.append(user_id)
            data[user_id]["current_pet"]["owner_ids"] = owner_ids
            data[user_id]["step"] = "ask_pet_name"
            save_data(data)
            await update.message.reply_text("–ö–∞–∫ –∑–æ–≤—É—Ç —Ç–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞?ü¶Ñ")
        else:
            await update.message.reply_text("ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Äüôà")

    elif step == "ask_pet_name":
        data[user_id]["current_pet"]["name"] = text
        pet_uuid = str(uuid.uuid4())
        data[user_id]["current_pet"]["uuid"] = pet_uuid
        data[user_id]["pets"].append(data[user_id]["current_pet"])
        del data[user_id]["current_pet"]
        data[user_id]["step"] = "waiting_for_link"
        save_data(data)

        redirect_url = f"https://findmypetbot.vercel.app/location?uuid={pet_uuid}"
        await update.message.reply_text(f"–ì–æ—Ç–æ–≤–æüéâ \n–í–æ—Ç —Å—Å—ã–ª–∫–∞:\n{redirect_url}")

    else:
        data[user_id]["step"] = "waiting_for_link"
        save_data(data)
        await update.message.reply_text("–ù–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞, –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—Éüîó")

# === –°–∞–º–æ–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ ===
async def ping_self():
    while True:
        try:
            if SELF_URL:
                async with httpx.AsyncClient() as client:
                    await client.get(SELF_URL)
                print("üì° Self-ping successful")
        except Exception as e:
            print("‚ùå Self-ping failed:", e)
        await asyncio.sleep(300)

def fake_server():
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind(("0.0.0.0", 8080))
        s.listen()
        while True:
            conn, addr = s.accept()
            with conn:
                conn.sendall(b"HTTP/1.1 200 OK\nContent-Type: text/plain\n\nFake port is live.\n")

def start_all():
    restore_data_from_github()
    threading.Thread(target=fake_server, daemon=True).start()
    loop = asyncio.get_event_loop()
    loop.create_task(ping_self())
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    loop.run_until_complete(app.run_polling())

if __name__ == "__main__":
    try:
        asyncio.get_running_loop()
        print("‚ö†Ô∏è Event loop already running")
    except RuntimeError:
        start_all()
